[{"C:\\Users\\colby\\Documents\\Work\\Code\\react-logo\\app\\src\\index.js":"1","C:\\Users\\colby\\Documents\\Work\\Code\\react-logo\\app\\src\\reportWebVitals.js":"2","C:\\Users\\colby\\Documents\\Work\\Code\\react-logo\\app\\src\\App.js":"3","C:\\Users\\colby\\Documents\\Work\\Code\\react-logo\\app\\src\\Components\\Canvas.js":"4","C:\\Users\\colby\\Documents\\Work\\Code\\react-logo\\app\\src\\Components\\InstructionList.js":"5","C:\\Users\\colby\\Documents\\Work\\Code\\react-logo\\app\\src\\Components\\Instruction.js":"6","C:\\Users\\colby\\Documents\\Work\\Code\\react-logo\\app\\src\\Components\\Input.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":4551,"mtime":1611251049167,"results":"11","hashOfConfig":"9"},{"size":3553,"mtime":1611252654188,"results":"12","hashOfConfig":"9"},{"size":526,"mtime":1611237541521,"results":"13","hashOfConfig":"9"},{"size":366,"mtime":1611204823234,"results":"14","hashOfConfig":"9"},{"size":959,"mtime":1611236567308,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1e1pse4",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"C:\\Users\\colby\\Documents\\Work\\Code\\react-logo\\app\\src\\index.js",[],["34","35"],"C:\\Users\\colby\\Documents\\Work\\Code\\react-logo\\app\\src\\reportWebVitals.js",[],"C:\\Users\\colby\\Documents\\Work\\Code\\react-logo\\app\\src\\App.js",["36","37"],"import React from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport InstructionList from './Components/InstructionList.js'\nimport Canvas from './Components/Canvas.js'\nimport Input from './Components/Input.js'\nclass App extends React.Component{\n\n  constructor(){\n    super();\n    this.state = {\n      instructions: [],\n      commandTemplates: this.getCommandTemplates()\n    }\n  }\n\n  addInstruction = (inst) =>{\n\n    const {instructions} = this.state;\n    inst = this.formatInstruction(inst);\n    let newItem = this.parseInstructionText(inst);\n    console.log(newItem);\n    if(!newItem)\n      return;\n    this.setState({\n      instructions: instructions.concat(        newItem      )\n    });\n  }\n\n\n  templateForComand = (command) => {\n    let commandTemplate\n    this.state.commandTemplates.forEach((template) =>{\n      if(template.command === command)\n        commandTemplate = template;\n    });\n    return commandTemplate;\n  }\n\n  parseArgs = (commandTemplate, args) =>{\n    let argsObj = {};\n    if(args.length !== commandTemplate.args.length)\n      return argsObj;\n    \n    // put the args in an object by name\n    for(let a = 0;a<commandTemplate.args.length;a++){\n      const argName = commandTemplate.args[a].name;\n      if(args.length>a)      \n        argsObj[argName] = args[a];\n    }\n\n    return argsObj;\n  }\n\n  parseInstructionText = inst => {\n    let parts = inst.split(' ');\n    parts = parts.filter((p) => {return p!==''});\n    if(parts.length==0)\n      return;\n    let command = parts[0];\n    // find the command in the template\n    const commandTemplate = this.templateForComand(command);\n    if(!commandTemplate)\n      return;\n\n    let rawArgs = parts.slice(1); // everything after the command\n    let args;\n    if(commandTemplate.parseArgs)\n      args = commandTemplate.parseArgs(commandTemplate, rawArgs);\n    else\n      args =this.parseArgs(commandTemplate, rawArgs);\n\n    return {\n      id: this.state.instructions.length,\n      text: inst,\n      command,\n      args,\n      do: commandTemplate.do\n    }\n  }\n\n  formatInstruction = inst =>{\n    return inst.toUpperCase();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        \n        <div className='left'>\n          <header>Instructions</header>\n          <Input addInstruction={this.addInstruction}/>\n          <InstructionList instructions={this.state.instructions}/>\n        </div>\n\n        <div className='right'>\n          <Canvas instructions={this.state.instructions} commandTemplates={this.commandTemplates} />\n        </div>\n        \n      </div>\n    );\n  }\n\n  getCommandTemplates = () => {\n    return [\n      {\n        command: \"GO\",\n        args: [\n          {\n            name:\"dist\"\n          }\n        ],        \n        do: function(state){\n          console.log(state, this.args);\n          // process dist, given angle\n          const delta = {\n            x: this.args.dist * Math.cos(state.angle*Math.PI/180),\n            y: this.args.dist * -Math.sin(state.angle*Math.PI/180)\n          }\n          state.pos.x= state.pos.x +delta.x;\n          state.pos.y= state.pos.y +delta.y;\n\n          state.ctx.lineTo(state.pos.x,state.pos.y);\n          \n          if(state.penDown){\n            //state.ctx.stroke();\n          }\n        }\n      },\n      {\n        command: \"ROT\",\n        args: [\n          {\n            name:\"deg\"\n          }\n        ],\n        do: function(state){          \n          state.angle += Number(this.args.deg);\n        }\n      },\n      {\n        command: \"TL\",\n        args: [\n          {\n            name:\"deg\"\n          }\n        ],\n        do: function(state){          \n          state.angle += Number(this.args.deg);\n        },\n        parseArgs: (t, raw) => {\n          let args = this.parseArgs(t, raw);\n          if(typeof args.deg === 'undefined')\n            args.deg = 90;   \n          return args;      \n       },\n      },\n      {\n        command: \"TR\",\n        args: [\n          {\n            name:\"deg\"\n          }\n        ],\n        do: function(state){          \n          state.angle -= Number(this.args.deg);\n        },\n        parseArgs: (t,raw) => {\n          let args = this.parseArgs(t, raw);          \n          if(typeof args.deg === 'undefined')\n            args.deg = 90;   \n          return args;      \n       },\n      },\n      {\n        command: \"REP\",\n        args: [\n          {            \n            name: \"prev\"\n          },\n          {            \n            name: \"count\"\n          }\n        ],\n        do: function(state){\n\n        }\n      }\n\n    ]\n  }\n\n}\n\n\nexport default App;\n","C:\\Users\\colby\\Documents\\Work\\Code\\react-logo\\app\\src\\Components\\Canvas.js",[],"C:\\Users\\colby\\Documents\\Work\\Code\\react-logo\\app\\src\\Components\\InstructionList.js",["38"],"import React from 'react'\r\nimport Instruction from './Instruction.js'\r\n\r\nclass InstructionList extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n    }\r\n\r\n    render(){\r\n        console.log(this.props)\r\n        return (\r\n            <div className='instructions'>\r\n                \r\n                {this.props.instructions.map(inst => (\r\n                <Instruction key={inst.id} text={inst.text}/>\r\n                ))}\r\n\r\n                \r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default InstructionList;","C:\\Users\\colby\\Documents\\Work\\Code\\react-logo\\app\\src\\Components\\Instruction.js",[],"C:\\Users\\colby\\Documents\\Work\\Code\\react-logo\\app\\src\\Components\\Input.js",["39"],"import React from 'react'\r\n\r\nclass Input extends React.Component{\r\n    \r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            text: ''\r\n        }\r\n    }\r\n\r\n    addInstruction = () =>{\r\n        this.props.addInstruction(this.state.text);\r\n        this.state.text='';\r\n    }\r\n    \r\n    \r\n    handleChange = (event) => {\r\n        const {name, value} = event.target\r\n      \r\n        this.setState({\r\n          [name]: value,\r\n        })\r\n      }\r\n\r\n    processKey = event => {\r\n        if(event.code === 'Enter')\r\n            this.addInstruction();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <input type='text' placeholder='Next Instruction' \r\n                onChange={this.handleChange} onKeyDown={this.processKey} value={this.state.text} name='text'/>\r\n                <button onClick={this.addInstruction} >Add</button>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Input;",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":2,"column":8,"nodeType":"46","messageId":"47","endLine":2,"endColumn":12},{"ruleId":"48","severity":1,"message":"49","line":58,"column":20,"nodeType":"50","messageId":"51","endLine":58,"endColumn":22},{"ruleId":"52","severity":1,"message":"53","line":6,"column":5,"nodeType":"54","messageId":"55","endLine":9,"endColumn":6},{"ruleId":"56","severity":1,"message":"57","line":14,"column":9,"nodeType":"58","endLine":14,"endColumn":19},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-global-assign","no-unsafe-negation"]